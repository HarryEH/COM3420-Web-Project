- content_for :title, 'Contribute'

- content_for :scripts do
  = javascript_include_tag 'map'
  = javascript_include_tag 'parsley.min'
  %script{:src => "//maps.google.com/maps/api/js", :type => "text/javascript"}
  -#%script{:src => "//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js", :type => "text/javascript"}
  -#%script{:src => "//google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.9/src/infobox_packed.js", :type => "text/javascript"}
  = yield :scripts

%h2 Upload #{ @medium.type }
%br

%div.panel.panel-default
  %div.panel-body
    %ul.nav.nav-pills
      %li{:class => ("active" if @medium.type == 'Recording'), :role => 'presentation'}
        =link_to new_recording_path do
          Oral Recording
      %li{:class => ("active" if @medium.type == 'Document'), :role => 'presentation'}
        =link_to new_document_path do
          Document
      %li{:class => ("active" if @medium.type == 'Image'), :role => 'presentation'}
        =link_to new_image_path do
          Image
      %li{:class => ("active" if @medium.type == 'Text'), :role => 'presentation'}
        =link_to new_text_path do
          Text

    %hr

    = simple_form_for @medium, html: { id: "upload-form" }  do |f|
      = f.input :type, as: :hidden, value: @medium.type

      = f.simple_fields_for :records do |r|
        = r.input :title, required: true

        - if @medium.type != 'Text'
          = f.input :upload, as: :file, :label => 'File', required: true,
            input_html: {:accept => @accepted_mimes, :'data-parsley-error-message' =>  'Please choose a file'}
          = f.input :upload_cache, as: :hidden
        - else
          = f.input :text, as: :text, required: true, :label => 'Text', :input_html => {:rows => 10}

        = r.input :location

        -#put here geocoder.search(function()), this should be based on the current marker
        -#on the map
        - if @medium.type != 'Text'
          = r.input :description, as: :text, required: true
        = r.input :ref_date, :label => 'Date', :include_blank => true, :start_year => 1850, :end_year => Date.today.year

      %hr

      %h3 Contact Information

      = f.simple_fields_for :contributor_attributes do |c|
        = c.input :name, required: false
        = c.input :email, as: :email
        = c.input :phone, required: false, input_html: { :pattern => '\d*',
          :'data-parsley-error-message' => 'Please enter a valid phone number' }

      %hr

      %h4 Village Memories Group may use my contribution for:

      = f.input :public_ref, :label => 'Public reference, eg talks, exhibitions'
      = f.input :education_use, :label => 'Educational use, eg in schools'
      = f.input :public_archive, :label => 'Public archive'
      = f.input :publication, :label => 'Publication'
      = f.input :broadcasting, :label => 'Broadcasting use on radio/TV or on the web'
      = f.input :editing, :label => 'Editing for the above purposes'

      %hr

      = f.input :copyright, :as => :boolean,
          :label => 'I agree to transfer full copyright of the media to Village Memories (BRMLA)', required: true
      = recaptcha_tags

      %br
      #map{:style => 'width: 800px; height: 510px;'}
      %br
      = f.button :submit, 'Upload', class: 'btn btn-primary'



:javascript
      map = new GMaps({
        el: '#map',
        lat: 53.452,
        lng: -1.212,
        zoom: 13,
        click: function(e) {
          placeMarker(e.latLng);
        },
      });

      function placeMarker(latLng){
        map.removeMarkers();
        map.addMarker({position:latLng});
      }

      //handler = Gmaps.build('Google');
      //var markersAry = [];
      //handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
      //  handler.map.centerOn({lat: 53.452, lng: -1.212});
      //  handler.getMap().setZoom(13);
      //  marker = createMarker({lat: 53.452, lng: -1.212});
      //  handler.addMarker();
      //  removeMarkers();
      //  handler.getMap().addListener('click', function(e) {
      //    //TODO need to clear markers
      //
      //    var latitude = e.latLng.lat();
      //    var longitude = e.latLng.lng();
      //    markersAry.push({lat: latitude , lng: longitude});
      //    handler.addMarkers(markersAry);
      //    console.log( latitude + ', ' + longitude );
      //  });
      //});
      //function placeMarker(latLng) {
      //  var marker = {
      //    position: latLng
      //    };
      //  markersArray.push(marker);
      //  console.log(marker.position)
      //}
      //// Removes the overlays from the map
      //function clearOverlays() {
      //  if (markersArray) {
      //    for (var i = 0; i < markersArray.length; i++ ) {
      //      markersArray[i].setMap(null);
      //    }
      //  }
      //  markersArray.length = 0;
      //}

      // Parsley form validation
      $('#upload-form').parsley();
