- content_for :title, 'Contribute'

- content_for :scripts do
  = javascript_include_tag 'map'
  = javascript_include_tag 'parsley.min'
  %script{:src => '//maps.google.com/maps/api/js', :type => 'text/javascript'}
  = yield :scripts

.row
  .col-md-12
    %h1.page-header Upload #{ @medium.type }

  .col-md-12
    %div.panel.panel-default
      %div.panel-body
        %ul.nav.nav-pills
          %li{:class => ("active" if @medium.type == 'Recording'), :role => 'presentation'}
            =link_to new_recording_path do
              Oral Recording
          %li{:class => ("active" if @medium.type == 'Document'), :role => 'presentation'}
            =link_to new_document_path do
              Document
          %li{:class => ("active" if @medium.type == 'Image'), :role => 'presentation'}
            =link_to new_image_path do
              Image
          %li{:class => ("active" if @medium.type == 'Text'), :role => 'presentation'}
            =link_to new_text_path do
              Text

        %hr

        .row
          - # This is at the top when the layout is small, not so great!
          #map-container.col-md-5.col-sm-12.pull-right
            %h3 Click to add marker
            #map{style: 'height: 510px;'}
            %button{id: 'clear-marker', class: 'pull-right btn btn-warning'}
              Remove marker

          = simple_form_for @medium, html: { id: 'upload-form', class: 'col-md-6 col-sm-12' }  do |f|

            - if @medium.errors.any?
              #error_explanation
                %h2
                  = pluralize(@medium.errors.count, 'error')
                %ul
                  - @medium.errors.full_messages.each do |msg|
                    %li #{msg}

            = f.input :type, as: :hidden, value: @medium.type

            = f.simple_fields_for :records do |r|
              = r.input :title, label: 'Title', required: true

              - if @medium.type != 'Text'
                = f.input :upload, as: :file, label: 'File', required: true,
                  input_html: {accept: @medium.accepted_mimes, :'data-parsley-file-extension' => @medium.accepted_mimes}
                = f.input :upload_cache, as: :hidden
              - else
                = f.input :text, as: :text, required: true, label: 'Text', input_html: {rows: 10}

              = r.input :location,  label: 'Location', input_html: {id: 'location-field'}
              = r.input :latitude,  label: 'Latitude', as: :hidden, input_html: {id:'latitude-input'}
              = r.input :longitude,  label: 'Longitude', as: :hidden, input_html: {id: 'longitude-input'}

              - if @medium.type != 'Text'
                = r.input :description,  label: 'Description', as: :text, required: true, input_html: {rows: 5}
              = r.input :ref_date, label: 'Date', include_blank: true, start_year:1850, end_year: Date.today.year

            %hr

            %h3 Contact Information

            = f.simple_fields_for :contributor do |c|
              = c.input :name,  label: 'Name', required: false
              = c.input :email,  label: 'Email', as: :email
              = c.input :phone,  label: 'Phone Number', required: false, input_html: {pattern: '(\+?(\s?\d)+)*',
                :'data-parsley-error-message' => 'Please enter a valid phone number' }

            %hr

            %h4 Village Memories Group may use my contribution for:

            = f.input :public_ref, label: 'Public reference, eg talks, exhibitions'
            = f.input :education_use, label: 'Educational use, eg in schools'
            = f.input :public_archive, label: 'Public archive'
            = f.input :publication, label: 'Publication'
            = f.input :broadcasting, label: 'Broadcasting use on radio/TV or on the web'
            = f.input :editing, label: 'Editing for the above purposes'

            %hr

            = f.input :copyright, as: :boolean,
                label: 'I agree to transfer full copyright of the media to Village Memories (BRMLA)', required: true
            = recaptcha_tags

            %br
            = f.button :submit, 'Upload', class: 'btn btn-primary'

:javascript
      //This is the map declaration, with the center and zoom etc.
      //It is unlikely that changes will need to be made here.
      map = new GMaps({
        el: '#map',
        lat: 53.452,
        lng: -1.212,
        zoom: 13,
        //This adds a marker on click
        click: function(e) {
          placeMarker(e.latLng);
        },
      });

      //This is the helper function for the click event on the map.
      //Removes old marker and adds a new one.
      function placeMarker(latLng){
        map.removeMarkers();
        map.addMarker({position:latLng});
        GMaps.geocode({
          latLng: latLng,
          callback: function(results, status) {
            if (status == 'OK') {
              //This is to prevent house numbers appearing, as much as possible.
              //Still occurs sometimes due to ranges of house numbers appearing
              if (parseInt(results[0].address_components[0].long_name)) {
                var location = results[0].formatted_address.substring(2)
                //if ($('#location-field').val().length <= 1){
                $('#location-field').val(location)
                //}
              } else {
                var location = results[0].formatted_address;
                //if ($('#location-field').val().length <= 1){
                $('#location-field').val(location)
                //}
              }
            }
          }
        });

        // Fills two hidden fields in the form which is submitted to the controller
        $("#latitude-input").val(latLng.lat())
        $("#longitude-input").val(latLng.lng())
      }

      // This checks the uploaded file type against the allowed types passed from the controller
      window.Parsley.addValidator('fileExtension', {
        validateString: function(value, requirement) {
          // Pop the extension
          var file_ext = '.' + value.split('.').pop();
          var allowed_exts = requirement.split(',');
          var allowed = false;

          // Loop through each allowed extension and check
          for (var i = 0; i < allowed_exts.length; i++) {
            var ext = allowed_exts[i]
            if (file_ext === ext) {
              allowed = true;
            }
          }
          return allowed;
        },
        requirementType: 'string',
        messages: {
          en: "File is not one of the allowed types"
        }
       });

      $('#clear-marker').click(function(e){
        map.removeMarkers();
        $('#location-field').val('')
        $("#latitude-input").val('')
        $("#longitude-input").val('')
      });

     if ($("#latitude-input").val()) {
        var latlng = new google.maps.LatLng(parseFloat(($("#latitude-input").val())),parseFloat($("#longitude-input").val()));
        map.addMarker({position:latlng});
     }

    // Parsley form validation
    $('#upload-form').parsley();
